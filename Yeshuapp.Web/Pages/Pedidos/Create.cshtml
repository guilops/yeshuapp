@page
@model CreateModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Novo Pedido";
}

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @Model.ErrorMessage
    </div>
}

@if (!ViewData.ModelState.IsValid && ViewData.ModelState.Values.SelectMany(v => v.Errors).Any())
{
    <div class="alert alert-danger" role="alert">
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

<!DOCTYPE html>
<html lang="pt-BR">
<body>
    <div class="container">
        <h2 class="mb-2 text-center" style="font-family: 'Dancing Script', cursive; font-size: 1.5rem; color: #4A4A4A;">@ViewData["Title"]</h2>

        <form method="post" id="createForm" enctype="multipart/form-data">
            <div class="form-group">
                <label asp-for="Pedido.CodigoCliente">Cliente</label>
                <select asp-for="Pedido.CodigoCliente" asp-items="Model.Irmaos" class="form-control" required>
                    <option value="">Selecione um irmão</option>
                </select>
                <span asp-validation-for="Pedido.CodigoCliente" class="text-danger"></span>
            </div>

            <!-- Seleção dos Produtos e Quantidade -->
            <div class="form-group">
                <label>Produtos</label>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Produto</th>
                            <th>Quantidade</th>
                            <th>Preço Unitário</th>
                            <th>Subtotal</th>
                            <th>Estoque</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Produtos.Count; i++)
                        {
                            <tr>
                                <td>@Model.Produtos[i].Nome</td>
                                <td>
                                    <input type="number" name="Pedido.Produtos[@i].Quantidade" class="form-control quantidade-produto" min="0" value="0" onchange="calcularTotal(this, @i)" />
                                    <input type="hidden" name="Pedido.Produtos[@i].Id" value="@Model.Produtos[i].Id" />
                                    <input type="hidden" name="Pedido.Produtos[@i].Valor" value="@Model.Produtos[i].Valor" />
                                </td>
                                <td>@Model.Produtos[i].Valor.ToString("C")</td>
                                <td class="subtotal">@Model.Produtos[i].Valor.ToString("C")</td>
                                <td>
                                    <input type="number" 
                                           name="Produtos[@i].Quantidade" 
                                           class="form-control quantidade-produto-estoque" 
                                           min="0"
                                           value="@Model.Produtos[i].Quantidade" 
                                           readonly 
                                           data-estoque-original="@Model.Produtos[i].Quantidade" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Valor Total -->
            <div class="form-group">
                <label>Valor Total</label>
                <input asp-for="Pedido.Valor" id="valorTotal" class="form-control" readonly />
                <span asp-validation-for="Pedido.Valor" class="text-danger"></span>
            </div>

            <div class="text-center">
                <button type="submit" class="btn btn-primary">Salvar</button>
                <a asp-page="/Pedidos/Index" class="btn btn-outline-primary">Voltar</a>
            </div>
        </form>
    </div>

    @section Scripts {
        <script>
            function calcularTotal(input, index) {
                let total = 0;
                const produtos = document.querySelectorAll('.quantidade-produto');

                produtos.forEach((prodInput, idx) => {
                    const quantidade = parseInt(prodInput.value) || 0;
                    const valor = parseFloat(document.querySelector(`input[name="Pedido.Produtos[${idx}].Valor"]`).value) || 0;
                    const subtotal = quantidade * valor;
                    document.querySelectorAll('.subtotal')[idx].innerText = subtotal.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
                    total += subtotal;

                    if (idx === index) {
                        const estoqueInput = document.querySelector(`input[name="Produtos[${idx}].Quantidade"]`);
                        const estoqueOriginal = parseInt(estoqueInput.getAttribute('data-estoque-original')) || 0;

                        if (quantidade > estoqueOriginal) {
                            prodInput.value = estoqueOriginal; // limita à quantidade disponível
                            alert("A quantidade solicitada excede o estoque disponível!");
                        }

                        estoqueInput.value = estoqueOriginal - parseInt(prodInput.value);
                    }
                });

                // Atualiza o valor total com vírgula decimal pt-BR
                document.querySelector('input[name="Pedido.Valor"]').value = total.toFixed(2).replace('.', ',');
            }
        </script>
    }

</body>
</html>